import asyncio
from datetime import datetime
import logging

import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from bot_config import bot, Session
from models.road import PomodoroStats

logger = logging.getLogger(__name__)

logger.warning('Possible race condition')
data = {'msg_if_restart': None}


async def start(message: aiogram.types.Message):
    logger.debug('Road handler started')
    photo_id = 'AgACAgIAAxkDAALtVWHn3ZZmzpMfA3SI7usT1avw9xrWAALRtjEbe9FASzJZxPBxsVhdAQADAgADeQADIwQ'
    logger.debug('Make sure that bot can use this photo_id: ' + photo_id)
    await message.answer_photo(
        photo_id,
        caption='–ü—Ä–∏–≤–µ—Ç <i>%s</i> —Ç—ã –≤–∫–ª—é—á–∏–ª –º–æ–¥—É–ª—å üöÄ<b>–†–û–î –ó–ï –î–†–ò–ú</b>üöÄ' %
        message['from']['first_name'])
    buttons = [['–ü–æ–º–∏–¥–æ—Ä üïî', '–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫']]
    bot.add_keyboard('road_choose', buttons)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ üõ† <b>–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</b>',
                         reply_markup=bot.keyboards['road_choose'])
    bot.add_state_handler(FSM.choose_tool, choose_tool)
    await FSM.choose_tool.set()


async def choose_tool(message: aiogram.types.Message, state: FSMContext):
    await state.finish()
    await message.delete()
    if message.text == '–ü–æ–º–∏–¥–æ—Ä üïî':
        await pomodoro(message)
    elif message.text == '–¢—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫':
        await habit_tracker(message)


async def pomodoro(message: aiogram.types.Message,
                   time_focused: int = 15*60,
                   time_relax: int = 15*60):
    await message.answer(
        '–í—ã –≤–∫–ª—é—á–∏–ª–∏ üïî <b>–ø–æ–º–∏–¥–æ—Ä</b>',
        reply_markup=ReplyKeyboardRemove())

    msg = await message.answer(
        '–£ –≤–∞—Å <i>15</i> –º–∏–Ω—É—Ç <b>–±—É–¥—å—Ç–µ —Å–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>')
    await timer(
        message['from']['id'],
        time_focused,
        text='<i>–í–∂–∞—Ä–∏–≤–∞–π –ø–æ –ø–æ–ª–Ω–æ–π</i>')

    await msg.edit_text('–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–¥—ã—Ö <i>15 –º–∏–Ω—É—Ç</i>')
    await timer(
        message['from']['id'],
        time_relax,
        text='<i>–ù–∞ —á–∏–ª–µ</i>')

    with Session.begin() as session:
        user = session.query(
            PomodoroStats).filter_by(
            user_id=message.from_user.id).first()
        user.today_cnt += 1
        cnt = user.today_cnt
    await msg.edit_text(
        '<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é</b> –≤—ã –ø–æ–ª—É—á–∏–ª–∏ <b>[<i>%s</i>üçÖ]</b>' % cnt)

    bot.add_keyboard('choose_bool', [['–î–∞', '–ù–µ—Ç']])
    data['msg_if_restart'] = await message.answer(
        '–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–º–∏–¥–æ—Ä?',
        reply_markup=bot.keyboards['choose_bool'])
    bot.add_state_handler(FSM.choose_bool, choose_bool)
    await FSM.choose_bool.set()


async def choose_bool(message: aiogram.types.Message, state: FSMContext):
    await state.finish()
    await message.delete()
    assert data['msg_if_restart'] is not None
    await data['msg_if_restart'].delete()
    if message.text == '–î–∞':
        await pomodoro(message)
    else:
        assert message.text == '–ù–µ—Ç'
        pass


async def timer(chat_id: str, seconds: int,
                text: str = 'Start', delay: int = 1,
                format_: str = '%M:%S'):
    msg = await bot.send_message(chat_id, text)
    now = datetime.now().timestamp()
    finish_time = now + seconds
    while True:
        now = datetime.now().timestamp()
        remain_time = finish_time - now
        if now >= finish_time:
            break
        await msg.edit_text(text + ' <b>%s</b>' %
                            datetime.fromtimestamp(
                                remain_time).strftime(format_))
        await asyncio.sleep(delay)
    await msg.delete()


async def habit_tracker(message: aiogram.types.Message):
    await message.answer(
        '–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ç—Ä–µ–∫–µ—Ä –ø—Ä–∏–≤—ã—á–µ–∫',
        reply_markup=ReplyKeyboardRemove())
    await message.answer('<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é</b> –≤—ã –ø–æ–ª—É—á–∏–ª–∏ ü¶£')


class FSM(StatesGroup):
    init = State()
    choose_tool = State()
    pomodoro = State()
    choose_bool = State()
